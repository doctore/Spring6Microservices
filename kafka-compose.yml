services:

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - Spring6Microservices
    ports:
      - "2181:2181"


  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    command: "sh -c 'exec /usr/bin/start-kafka.sh & sleep 5 && kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic orders && tail -f /dev/null'"
    networks:
      - Spring6Microservices
    ports:
      - "9092:9092"


networks:
  Spring6Microservices:
    external: true
    name: Spring6Microservices


# ------------------------------------------------------------------------------------------
# COMMANDS:
#
# 1. Create and start containers:
#
#      docker compose -f kafka-compose.yml up
#
#    1.1 If you want to create the Docker images use --build
#
#
# 2. Stop and remove containers:
#
#      docker compose -f kafka-compose.yml down
#
#
# 3. To check Kafka:
#
#    3.1 Producing messages:
#
#          docker exec -it kafka /opt/kafka/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic orders
#
#    3.2 Consuming messages:
#
#          docker exec -it kafka /opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic orders --from-beginning
