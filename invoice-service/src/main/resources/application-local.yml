# Encryption configuration
encrypt:
  # Defined symmetric (shared) key to encrypt/decrypt text:
  #
  #  1. Receiving encrypted property values from Config Server like:
  #       spring.datasource.password: "{cipher}..."
  #
  #  2. Receiving encrypted column values from database like:
  #       security.application_client_details.signature_secret = '{cipher}...'
  #
  # To encrypt a text, use the endpoint POST: localhost:8888/encrypt and the text in its body
  key: ${ENCRYPT_KEY:ENCRYPT_KEY}


# Disable eureka server connection request
eureka:
  client:
    enabled: false


# gRPC client and server configuration
grpc:
  client:
    # Time in seconds waiting for the client to become terminated, giving up if the timeout is reached.
    # 0 means no value
    awaitTerminationInSeconds: 30
    # Time in seconds waiting for a response from the server after invoking any method on client side, giving up if the timeout is reached.
    # 0 means no value
    withDeadlineAfterInSeconds: 30
  server:
    host: localhost
    port: 8070


# Main properties in Spring Boot to configure some general purpose services
management:
  endpoints:
    web:
      exposure:
        # Actuator endpoints exposed: actuator/routes
        include: health, info
  tracing:
    sampling:
      # To log traceId and spanId in every request
      probability: 1.0


# Configuration for external REST requests
rest:
  connect:
    timeoutInMilliseconds: 5000
  read:
    timeoutInMilliseconds: 30000
  response:
    timeoutInMilliseconds: 30000
  write:
    timeoutInMilliseconds: 30000


# Custom security configuration
security:
  # Configuration used to connect to the security microservice
  authorizationServer:
    authenticationInformation: http://localhost:8180/security/custom/authorization/check_token
    clientId: Spring6Microservices
    # Raw password: Spring6Microservices
    clientPassword: "{cipher}1274c88a1340ad50f1199fd477c1406e4d020ca321a4b27443d7df371cc83262d9688c3e883141cf08e04878d85e42b2"
  # CORS configuration
  cors:
    # Enable cross-origin request handling for the specified path pattern
    mapping: /**
    # Comma separated HTTP methods to allow
    allowedMethods: DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT
    # Comma separated origins for which cross-origin requests are allowed from a browser
    allowedOrigins: "*"


# Server configuration
server:
  port: 8183


# Spring framework configuration
spring:
  cloud:
    # Disable configuration server request to work provided values
    config:
      enabled: false
  datasource:
    url: jdbc:postgresql://localhost:5432/spring6
    username: spring6
    # Using environment variable ENCRYPT_KEY=ENCRYPT_KEY
    # Getting the value with POST localhost:8888/encrypt and the password in its body (using config-server)
    # Raw password: spring6
    password: "{cipher}c8e1f3a8e0f5d7246a0dcbe620b97de51b580a1ef16f80ffafd3989920287278"
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: com.invoice.util.deserializer.OrderEventDtoJsonDeserializer
      # The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop.
      reconnect-backoff-ms: 30000
      # Package with the objects allowed to be sent through Kafka
      trusted-package: com.spring6microservices.common.spring.jms.dto


# API documentation
#
# In local the URLs are:
#   1. http://localhost:8183/invoice/api-docs to get the information in JSON format
#   2. http://localhost:8183/invoice/swagger-ui/index.html to display the UI with all defined endpoints
springdoc:
  api-docs:
    # Path of the OpenAPI documentation in JSON format
    path: /invoice/api-docs
  documentation:
    apiVersion: 1.0
    title: Invoice Service Rest Api
    description: Services used to manage the invoices
  # Custom properties to define security configuration for documented API
  security:
    authorization: Basic Auth
    schema: basic
  swagger-ui:
    # To disable the swagger-ui default petstore url
    disable-swagger-default-url: true
    # Custom path of the swagger-ui HTML documentation
    path: /invoice/swagger-ui.html