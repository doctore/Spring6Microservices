# Encryption configuration
encrypt:
  # Defined symmetric (shared) key to encrypt/decrypt text:
  #
  #  1. Receiving encrypted property values from Config Server like:
  #       spring.datasource.password: "{cipher}..."
  #
  #  2. Receiving encrypted column values from database like:
  #       security.application_client_details.signature_secret = '{cipher}...'
  #
  # To encrypt a text, use the endpoint POST: localhost:8888/encrypt and the text in its body
  key: ${ENCRYPT_KEY:ENCRYPT_KEY}


# Disable eureka server connection request
eureka:
  client:
    enabled: false


# gRPC server configuration
grpc:
  server:
    port: 8070
    # Time in seconds waiting for the server to become terminated, giving up if the timeout is reached.
    # 0 means no value
    awaitTerminationInSeconds: 30


# Main properties in Spring Boot to configure some general purpose services
management:
  endpoints:
    web:
      exposure:
        # Actuator endpoints exposed: actuator/routes
        include: health, info
  tracing:
    sampling:
      # To log traceId and spanId in every request
      probability: 1.0


# Custom security configuration
security:
  # CORS configuration
  cors:
    # Enable cross-origin request handling for the specified path pattern
    mapping: /**
    # Comma separated HTTP methods to allow
    allowedMethods: DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT
    # Comma separated origins for which cross-origin requests are allowed from a browser
    allowedOrigins: "*"


# Server configuration
server:
  port: 8182


# Spring framework configuration
spring:
  cloud:
    # Disable configuration server request to work provided values
    config:
      enabled: false
  datasource:
    url: jdbc:postgresql://localhost:5432/spring6
    username: spring6
    # Using environment variable ENCRYPT_KEY=ENCRYPT_KEY
    # Getting the value with POST localhost:8888/encrypt and the password in its body (using config-server)
    # Raw password: spring6
    password: "{cipher}c8e1f3a8e0f5d7246a0dcbe620b97de51b580a1ef16f80ffafd3989920287278"
  security:
    # Oauth 2.0 configuration
    oauth2:
      # Custom Authorization Server
      authorizationserver:
        endpoint:
          # Endpoint used to verify the tokens used for authorization
          token-introspection-uri: http://localhost:8181/security/oauth/introspect
          client-id: Spring6Microservices
          # Using environment variable ENCRYPT_KEY=ENCRYPT_KEY
          # Getting the value with POST localhost:8888/encrypt and the password in its body (using config-server)
          # Raw password: Spring6Microservices
          client-secret: "{cipher}1274c88a1340ad50f1199fd477c1406e4d020ca321a4b27443d7df371cc83262d9688c3e883141cf08e04878d85e42b2"


# API documentation
#
# In local the URLs are:
#   1. http://localhost:8182/order/api-docs to get the information in JSON format
#   2. http://localhost:8182/order/swagger-ui/index.html to display the UI with all defined endpoints
springdoc:
  api-docs:
    # Path of the OpenAPI documentation in JSON format
    path: /order/api-docs
  documentation:
    apiVersion: 1.0
    title: Order Service Rest Api
    description: Services used to manage the orders
  # Custom properties to define security configuration for documented API
  security:
    authorization: Basic Auth
    schema: basic
  swagger-ui:
    # To disable the swagger-ui default petstore url
    disable-swagger-default-url: true
    # Custom path of the swagger-ui HTML documentation
    path: /order/swagger-ui.html